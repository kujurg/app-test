pipeline {
    agent any

    parameters {
        string(name: 'TAG', , defaultValue: '1.0.0', description: 'please enter the tag in following format 1.0.0')
        // string(name: 'NEW_RELEASE_NAME', defaultValue: 'webapp', description: 'Helm release name')
        // string(name: 'OLD_RELEASE_NAME', defaultValue: 'webapp', description: 'Helm release name')
        booleanParam(name: 'INITIAL',defaultValue: false, description: 'Is this intial deployment')
        string(name: 'CHART_PATH', defaultValue: './webapp_chart', description: 'Path or name of Helm chart')
        string(name: 'NAMESPACE', defaultValue: 'default', description: 'Kubernetes namespace')

    }

    environment {
        STABLE_WEIGHT = 90
        CANARY_WEIGHT = 10
    }

    stages {
        stage('Establish connection to the cluster') {
            steps {
                sh 'gcloud container clusters get-credentials webapp --zone us-central1-a --project deeplearning-390607'
            }
        }
        stage('Helm Version Check') {
            steps {
                sh 'helm version'
            }
        }
                     

        stage('Deploy Helm Chart') {
                when {
                        expression { params.INITIAL == true }
                    }
            steps {
                script {
                    echo "Deploying Helm chart: ${params.CHART_PATH}"
                    echo "Using release name: ${params.NEW_RELEASE_NAME}"
                    echo "Namespace: ${params.NAMESPACE}"
                    
                    // Deploy the Helm chart with the provided parameters
                    sh """
                    helm upgrade --install ${params.NEW_RELEASE_NAME} \
                                 ${params.CHART_PATH} \
                                 --namespace ${params.NAMESPACE} \
                                 --set image.tag=${params.TAG} \
                                 --wait
                    kubectl apply -f ./webapp_chart/stable-service.yaml
                    kubectl patch service stable-service -p '{"spec":{"selector":{"app": "${params.TAG}"}}}'
                    kubectl apply -f ./webapp_chart/gateway.yaml.yaml
                    kubectl apply -f ./webapp_chart/httproute.yaml.yaml
                    """
                }
            }
        }

        stage('Deploy Canary helm Chart') {
                when {
                        expression { params.INITIAL == false }
                    }
            steps {
                script {
                    echo "Deploying Canary Helm chart: ${params.CHART_PATH}"
                    echo "Using release name: ${params.NEW_RELEASE_NAME}"
                    echo "Namespace: ${params.NAMESPACE}"
                    
                    // Deploy the Helm chart with the provided parameters
                    sh """
                    helm upgrade --install canary-${params.NEW_RELEASE_NAME} \
                                 ${params.CHART_PATH} \
                                 --namespace ${params.NAMESPACE} \
                                 --set image.tag=${params.TAG} \
                                 --wait
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "Verifying the deployment in namespace ${params.NAMESPACE}"
                    // Verify that the pods are running in the desired namespace
                    sh "kubectl get pods -n ${params.NAMESPACE}"
                }
            }
        }

        stage('upgrade the canary deployment by 10%') {
            when {
                    expression { params.INITIAL == false }
                }
            steps {
                script {
                        // write the logic for canary deployment
                        echo "upgrade the canary deployment by 10%"
                }
            }
        }

        stage(' Test the green deployment') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // test the deployment 
                    echo "pass"
                }
            }
        }

        stage('upgrade the canary deployment by 50%') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // write the logic for canary deployment
                    echo "pass"
                }
            }
        }

        stage(' Test the green deployment') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // test the deployment 
                    echo "pass"
                }
            }
        }
        stage('upgrade the canary deployment by 75%') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // write the logic for canary deployment
                    echo "pass"
                }
            }
        }

        stage(' Test the green deployment') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // test the deployment 
                    echo "pass"
                }
            }
        }
        stage('upgrade the canary deployment by 100%') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // write the logic for canary deployment
                    echo "pass"
                }
            }
        }

        stage(' Test the green deployment') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // test the deployment 
                    echo "pass"
                }
            }
        }
        // stage('Input: Upgrade or Rollback') {

        //     steps {
        //         script {
        //             def userInput = input(id: 'UserInput', message: 'Do you want to Upgrade or Rollback?', parameters: [
        //                     choice(
        //                         name: 'ACTION', 
        //                         choices: ['Upgrade', 'Rollback'], 
        //                         description: 'Choose whether to Upgrade or rollback the changes.'
        //                     )
        //                 ]
        //             )

        //             // Store the user's choice for later use
        //             env.CHOICE = userInput.ACTION
        //         }
        //     }
        // }

        stage(' Remove the old deployment') {
             when {
                expression { params.INITIAL == false }
                 }
            steps {
                script {
                      sh """
                      echo "pass"
                    //   helm uninstall $OLD_RELEASE_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'deployment succeeded!'
        }
        failure {
            echo 'deployment failed!'
        }
    }
}