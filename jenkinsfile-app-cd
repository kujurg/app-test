pipeline {
    agent any

    parameters {
        string(name: 'TAG', , defaultValue: '1.0.0', description: 'please enter the tag in following format 1.0.0')
        string(name: 'NEW_RELEASE_NAME', defaultValue: 'webapp-v', description: 'Helm release name')
        string(name: 'OLD_RELEASE_NAME', defaultValue: 'canary-webapp-v', description: 'Helm release name')
        booleanParam(name: 'INITIAL',defaultValue: false, description: 'Is this intial deployment')
        string(name: 'CHART_PATH', defaultValue: './webapp_chart', description: 'Path or name of Helm chart')
        string(name: 'NAMESPACE', defaultValue: 'default', description: 'Kubernetes namespace')

    }

    environment {
        STABLE_WEIGHT = 75
        CANARY_WEIGHT = 25
    }

    stages {
        stage('Establish connection to the cluster') {
            steps {
                sh """
                set +x
                gcloud container clusters get-credentials ${GKE_CLUSTER} --zone us-central1-a --project ${PROJECT}
                set -x
                """
            }
        }

        stage(' Initial Deployment') {
                when {
                        expression { params.INITIAL == true }
                    }
            steps {
                script {
                    echo "Deploying Helm chart: ${params.CHART_PATH}"
                    echo "Using release name: ${params.NEW_RELEASE_NAME}"
                    echo "Namespace: ${params.NAMESPACE}"
                    // Deploy the Helm chart with the provided parameters
                    sh """
                    set +x
                    helm version
                    helm upgrade --install ${params.NEW_RELEASE_NAME} \
                                 ${params.CHART_PATH} \
                                 --namespace ${params.NAMESPACE} \
                                 --set image.tag=${params.TAG} \
                                 --wait
                    kubectl apply -f ./webapp_chart/stable-service.yaml
                    kubectl apply -f ./webapp_chart/canary-service.yaml
                    kubectl patch service stable-service -p '{"spec":{"selector":{"app": "${params.TAG}"}}}'
                    kubectl patch service canary-service -p '{"spec":{"selector":{"app": "${params.TAG}"}}}'
                    kubectl apply -f ./webapp_chart/gateway.yaml
                    kubectl apply -f ./webapp_chart/httproute.yaml
                    set -x
                    """
                }
            }
        }

        stage('Deploy Canary helm Chart') {
                when {
                        expression { params.INITIAL == false }
                    }
            steps {
                script {
                    echo "Deploying Canary Helm chart: ${params.CHART_PATH}"
                    echo "Using release name: ${params.NEW_RELEASE_NAME}"
                    echo "Namespace: ${params.NAMESPACE}"
                    
                    // Deploy the Helm chart with the provided parameters
                    sh """
                    set +x
                    helm upgrade --install canary-${params.NEW_RELEASE_NAME} \
                                 ${params.CHART_PATH} \
                                 --namespace ${params.NAMESPACE} \
                                 --set image.tag=${params.TAG} \
                                 --wait
                    set -x
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "Verifying the deployment in namespace ${params.NAMESPACE}"
                    // Verify that the pods are running in the desired namespace
                    sh "kubectl get pods -n ${params.NAMESPACE}"
                }
            }
        }

        stage('upgrade the traffic to canary deployment by 25%') {
            when {
                    expression { params.INITIAL == false }
                }
            steps {
                script {
                        // write the logic for canary deployment
                        sh """
                        set +x
                        kubectl patch service canary-service -p '{"spec":{"selector":{"app": "${params.TAG}"}}}'
                        sleep 5
                        kubectl patch httproute route-http \
                                        -n default \
                                        --type='json' \
                                        -p='[{
                                            "op": "replace",
                                            "path": "/spec/rules/0/backendRefs/0/weight",
                                            "value": ${STABLE_WEIGHT}
                                        },
                                        {
                                            "op": "replace",
                                            "path": "/spec/rules/0/backendRefs/1/weight",
                                            "value": ${CANARY_WEIGHT}
                                        }]'
                        set -x
                        """
                }
            }
        }

        stage(' Test the canary deployment at 25%') {
            when {
                expression { params.INITIAL == false }
            }
            steps {
                script {
                    // test the deployment 
                    def userInput = input(id: 'UserInput', message: 'Shifted traffic to canary deployment by 25%. Do you want to Upgrade or Rollback', parameters: [
                            choice(
                                name: 'ACTION', 
                                choices: ['Upgrade', 'Rollback'], 
                                description: 'Choose whether to Upgrade or rollback the changes.'
                            )
                        ]
                    )
                    echo "${userInput} - ${}"
                }
            }
        }

        stage('upgrade the traffic to canary deployment by 50%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    sh """
                    set +x
                    kubectl patch httproute route-http \
                        -n default \
                        --type='json' \
                        -p='[{
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/0/weight",
                            "value": 50
                        },
                        {
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/1/weight",
                            "value": 50
                        }]'
                        sleep 5
                    set -x
                    """
                }
            }
        }

        stage(' Test the Canary deployment at 50%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    // test the deployment 
                    def userInput = input(id: 'UserInput', message: 'Shifted traffic to canary deployment by 50%. Do you want to Upgrade or Rollback', parameters: [
                            choice(
                                name: 'ACTION', 
                                choices: ['Upgrade', 'Rollback'], 
                                description: 'Choose whether to Upgrade or rollback the changes.'
                            )
                        ]
                    )
                }
            }
        }
        stage('upgrade the traffic to canary deployment by 75%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    sh """
                    set +x
                    kubectl patch httproute route-http \
                        -n default \
                        --type='json' \
                        -p='[{
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/0/weight",
                            "value": 25
                        },
                        {
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/1/weight",
                            "value": 75
                        }]'
                    set -x
                    """
                }
            }
        }

        stage(' Test the canary deployment at 75%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    // test the deployment 
                    def userInput = input(id: 'UserInput', message: 'Shifted traffic to canary deployment by 75%. Do you want to Upgrade or Rollback', parameters: [
                            choice(
                                name: 'ACTION', 
                                choices: ['Upgrade', 'Rollback'], 
                                description: 'Choose whether to Upgrade or rollback the changes.'
                            )
                        ]
                    )
                }
            }
        }
        stage('upgrade the traffic to canary deployment by 100%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    sh """
                    set +x
                    kubectl patch httproute route-http \
                        -n default \
                        --type='json' \
                        -p='[{
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/0/weight",
                            "value": 0
                        },
                        {
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/1/weight",
                            "value": 100
                        }]'
                    set -x
                    """
                }
            }
        }

        stage(' Test the canary deployment at 100%') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    // test the deployment 
                    def userInput = input(id: 'UserInput', message: 'Shifted traffic to canary deployment by 100%. Do you want to Upgrade or Rollback', parameters: [
                            choice(
                                name: 'ACTION', 
                                choices: ['Upgrade', 'Rollback'], 
                                description: 'Choose whether to Upgrade or rollback the changes.'
                            )
                        ]
                    )
                }
            }
        }

        stage(' Rollback') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Rollback" }
            }
            steps {
                script {
                    sh '''
                    set +x
                    kubectl patch httproute route-http \
                        -n default \
                        --type='json' \
                        -p='[{
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/0/weight",
                            "value": 100
                        },
                        {
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/1/weight",
                            "value": 0
                        }]'
                    STABLE_VER=$(kubectl describe svc stable-service | grep 'Selector:' | awk '{print $2}' | cut -d'=' -f2)
                    kubectl patch service canary-service -p '{"spec":{"selector":{"app": "${STABLE_VER}"}}}'
                    helm uninstall canary-${params.NEW_RELEASE_NAME}
                    sleep 5
                    set -x
                    '''
                }
            }
        }

        stage('Upgrade the deployment to canary version') {
            when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
            }
            steps {
                script {
                    sh """
                    set +x
                    kubectl patch service stable-service -p '{"spec":{"selector":{"app": "${params.TAG}"}}}'
                    sleep 5
                    kubectl patch httproute route-http \
                        -n default \
                        --type='json' \
                        -p='[{
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/0/weight",
                            "value": 100
                        },
                        {
                            "op": "replace",
                            "path": "/spec/rules/0/backendRefs/1/weight",
                            "value": 0
                        }]'
                    set -x
                    """
                }
            }
        }

        stage(' Remove the old deployment') {
             when {
                expression { params.INITIAL == false && ${userInput} == "Upgrade" }
                 }
            steps {
                script {
                    sh """
                    helm uninstall $OLD_RELEASE_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'deployment succeeded!'
        }
        failure {
            echo 'deployment failed!'
        }
    }
}